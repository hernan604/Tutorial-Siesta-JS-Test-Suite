=encoding utf8

=head1 Tutorial Siesta JS - Test Driven Development

=head2 SINOPSE

Este tutorial ensina boas práticas para automatizar testes durante o desenvolvimento de aplicações.

Vou utilizar o Siesta JS pois é a suíte de testes mais completa e prática que encontrei. Além de ser JS puro e rodar em qualquer navegador sem precisar instalar nada, ela é feita em Joose-JS e faz tudo que o qunitjs faz, e faz tudo que o selenium faz.

=head2 DESCRIÇÃO

Neste tutorial, irei demonstrar meios para desenvolvimento voltado a testes.

Ao desenvolver um módulo js, é comum que criar uma classe, ou um arquivo .js com alguns métodos e variáveis. E logo depois esse módulo/script é carregado em uma página de testes (html). Em seguida abre-se a página no browser. 
Assim que o desenvolvimento continua, o desenvolvedor aperta F5 para atualizar a tela verificar se a alteração funcionou de fato. Isso é feito até que o módulo parece funcionar e dai essa bagaça sobe para produção. E funciona...

até que ...

outra pessoa ou até você mesmo precisa mexer nesse módulo para fazer alterações. 

O X da questão é que esse módulo aparenta ter algumas funcionalidades, mas de cara vc pode não saber exatamente quais as funcionalidades que o módulo de fato faz... então vc pode alterar um ponto para atender um determinado requisito, mas derepente essa alteração pode quebrar um outro ponto no módulo que não está sendo chamado na sua página de teste (HTM).

Os testes ajudam a prevenir exatamente esse tipo de comportamento. 
Uma aplicação bem testada ajuda a garantir que se vc mexer 'aqui' não irá quebrar 'ali'.

Isso é importante pois durante o desenvolvimento de um módulo, o desenvolvedor tem tudo fresco na cabeça... nesse momento ele conhece todos os métodos do módulo e sabe de cor todas as funcionalidades e sabe exatamente o que o módulo faz ou não faz. 

Então imagine que o módulo está pronto e funcionando em produção por 2 anos... quando derepente, aparece uma alteração em funcionalidade.... e agora? o módulo vai ser alterado... será que vai quebrar algo ? 

=head2 O que são testes

Testes são 'provas' de que funcionalidades estão funcionando como deveriam. 

Vamos supor que eu tenho um módulo de calculadora, que consiste basicamente em métodos:

  somar = function ( a, b ) { 
      return a + b;
  }

  subtrair = function ( a, b ) { 
      return a - b;
  }

  multiplicar = function ( a , b ) {
      return a * b;
  }

  dividir = function ( a , b ) { 
      return a / b;
  }

como testar isso e garantir que estão funcionando ?

com testes... mas como ?

muito simples, veja um exemplo para testar o método de soma:

  ok( somar( 1 , 2 ) == 3, ' soma de 1 com 2 resulta em 3 ' )

primeiro, vou explicar o que é o 'ok':  O método ok é bastande comum nas suítes de testes de diferentes linguagens. 

As suites de testes disponibilizam alguns métodos padrão, são eles:

  ok( value, desc )

como vc pode perceber, o método ok recebe 2 variáveis. Na primeira, é um valor, ou o resultado de alguma operação/método. Se esse value resultar em true, o teste vai passar. ex:

  ok( somar( variavel1, variavel2 ) == variavel3 , "vai executar o metodo somar com variavel1 e variavel2, e o resultado disso tem que ser igual a variavel3 " )

e se por algum motivo alguem ou vc mesmo alterar erroneamente o método somar, o teste vai começar a falhar e vc vai saber que algo está errado nesse método. Ai vc investiga e resolve.

Tambem muito comum é o método is:

  is( valor1, valor2, desc )

exemplo:
  
  is( somar(1,2), 3, " o valor do primeiro argumento é igual ao segundo arqumento " )

Outro método de assertion de testes bastante comum é o isDeeply: 

  isDeeply( obj1, obj2, desc )

Que basicamente recebe dois objetos e verifica se eles tem os mesmos itens. Não precisam estar necessariamente na mesma ordem mas tem que eles tem que existir tanto em um objeto quanto no outro. 

Exemplo que vai dar certo:

  isDeeply(   { id: 2, nome: 'João', sobrenome: 'Silva', idade: 50  }    ,     {  sobrenome: 'Silva', id: 2,  idade: 51, nome: 'João' }    , " verifica se o primeiro objeto tem os mesmos itens com valores similares ao segundo objeto"  )

Outro jeito de fazer seria passar um método e verificar se volta o resultado esperado, por exemplo:

  isDeeply(   buscar_pessoa( {id : 2} )    ,     {  sobrenome: 'Silva', idade: 51, nome: 'João' }    , " verifica se o primeiro objeto tem os mesmos itens com valores similares ao segundo objeto"  )

Supondo que o método buscar_pessoa retorne um objeto conforme o esperado ^^, o teste vai passar. E se por algum motivo esse método retornar coisas distintas, o teste vai falhar.

Outro exemplo é o método like que recebe um valor e uma regex e verifica se a regex bate com o valor passado.

  like( string, regex, desc )

  like( 73213782581, /^\d+$/ , "tem apenas números no primeiro argumento" )



Então a idéia central dos testes, é provar que as funcionalidades implementadas funcionam conforme o esperado. A idéia é registrar todas as funcionalidades nos testes e provar que todas elas funcionam. Dessa maneira, o desenvolvedor poderá mexer no código e executar os testes depois e verificar rapidamente se alguma funcionalidade não está funcionando.

Isso traz tranquilidade à empresa, pois se tudo está testado, a empresa pode colocar novos funcionários e eles podem começar a implementar funcionalidades e criar testes, e garantir que as novas funcionalidades funcionam e ao mesmo tempo, garantir que eles não quebraram nenhuma funcionalidade que já estava implementada.

Não ter testes é uma roleta russa... hora da certo, hora pode dar errado.

=head2 Testes de interface

Outro tipo de teste são os testes que envolvem interface. 

Por exemplo, ao clicar num botão 'fundo azul', o fundo da tela tem que ficar azul. Como testar isso ?

Isso tambem é possível com o siesta JS. e é bastante fácil, segue um exemplo: 

  t.chain(
    //leve o mouse até o seletor abaixo
    {
      action: "moveCursorTo",                         // acão escolhida
      target: ".botoes > .botao_muda_fundo_pra_azul"  //seletor css
    },

    //agora valida se o botão está visível... use jquery se quiser =)
    function ( next ) {
      // valida se o botão está visível ( tambem consigo usar jquery se eu precisar.. que beleza hein... )
      t.is( $( ".botoes > .botao_muda_fundo_pra_azul" ).is( ":visible" ), true, " Que beleza, o botão está visível !!" )
      next(); //este método vai chamar o próximo teste dentro deste chain (corrente de testes)
    },

    //agora clica no botão
    {
     action: "click",                                   //agora tome a ação de clicar
     target: ".botoes > .botao_muda_fundo_pra_azul"     //no botão com este seletor
    },

    //e finalmente verifica se a cor de fundo mudou conforme o esperado
    function ( next ) {
      // Agora, verifique o fundo se o fundo da tela ficou azul conforme esperado;
      var cor_de_fundo_esperada = "#0000FF";
      t.is( jQuery("body").css("background-color") , "#0000FF", " O fundo ficou azul, massa !!" )
      // validação simples que verifica se o fundo está azul

      next(); 
    }
  )

Ou talvez seu projeto precise clicar num botão para abrir um menu, tudo isso pode ser testado segundo passos similares ao passo descrito acima.

=head2 Desenvolvimento com testes

Existem basicamentes 3 jeitos de desenvolver uma aplicação:

1. Criar classes e implementação e só depois os testes
2. Criar classes, testes e depois implementar
3. Criar testes, depois classes e depois implementar

Não existe um jeito que seja definitivamente o melhor, todos tem seus prós e contras... e no final a decisão é pessoal e vai contar a experiência do desenvolvedor ao passar pelos 3 tipos e concluir qual serve melhor, para ele.


Atualmente eu prefiro criar classes e criar testes ao mesmo tempo. Assim o teste é a implementação da minha classe.

O 3 é bastante usado inclusive em Dojôs, pois uma das premissas do dojô é que o teste deve ser feito primeiro e só depois deve ser feita a implementação do teste. Ou seja, a implementação da classe tem que atender à especificação do teste. Isso ajuda a ter uma idéia de como será a utilização da classe criada, pois é possível definir um uso bacana sem ter escrito a classe ainda.

Assim como escrever um livro, é questão de costume. Alguns preferem começar pelo índice e outros preferem escrever o livro antes.

=head2 O que testar ?

Esta é uma questão que não tem resposta definida. Cada projeto tem necessidades distintas e o teste deve atender o projeto. 

Com um teste mais macro, eu começaria a resposta por: Os testes devem provar o que a especificação pediu. Ou seja, aquele email do projeto que tem várias linhas de como deve funcionar, isso pode ser testado para garantir e provar que as solicitações foram atendidas.

E entrando mais em detalhe, outras coisas tambem podem ser testadas, por exemplo:

O módulo está colocando variáveis globais inesperadas ?
Todos os métodos estão funcionando ?
A interface funciona ?

=head2 Como testar

Outra pergunta complicada. Depende do teste.

A idéia principal é reproduzir o ambiente de produção e as situações e assim você poderá rodar o teste.

Por exemplo, se vc está criando um módulo/plugin para um frameworkX. Seu módulo vai implementar apenas a funcionalidade respectivao ao módulo... mas no teste (dentro do teste e fora do módulo) vc pode incluir o framework X para o teste rodar e testar seu módulo.. dai vc implementa o teste similar à maneira que vc implementa em produção... a idéia é conseguir reproduzir, testar e provar que as coisas funcionam.

Outro ponto importante é separar bem os métodos... para facilitar o teste. Ou seja, um método de 1000 linhas provavelmente faz coisa demais e vai ficar difícil testar essa joça. Então é ideal que o método seja quebrado em partes menores e em outros métodos para que seja possível testar eles de maneira independente. É ideal que cada método resolva problemas específicos.. ao invés de ter métodos que mais parecem uma aplicação completa. Isso facilita muito o re-aproveita mento de código para DRY. E permite que seja criado testes unitários para cada um destes métodos pequenos que resolvem problemas específicos.


=head2 DRY - Dont repeat yourself (não repida código)

Até nos testes é uma boa prática não repetir código.

Vamos supor que vc precisa de alguns métodos que são comums para testar todos os seus módulos. 

Se optar pelo pior jeito, vai colar o trecho em cada arquivo de teste.

Se optar pelo melhor jeito, vai criar um arquivo com os métodos em comum. e carregar esse arquivo junto com cada teste.

Por exemplo, vamos supor que vc tem 3 arquivos de testes, e pra testar, é necessário logar em um sistema:

  método de login:

  login = function( username, password ) { 
      ...
  } 

  arquivo_teste1.js
  arquivo_teste2.js
  arquivo_teste3.js

É possível colar o método de login nos 3 arquivos de teste, ou, 

No cenário ideal é possível salvar esse método de login dentro de um arquivo, ex: login.js e carregar ele junto com os testes, ex:

  teste_utils.js // contem o metodo de login e outros métodos comuns e necessários aos testes
  arquivo_teste1.js
  arquivo_teste2.js
  arquivo_teste3.js

=head2 Testando com Siesta JS

Agora vou demonstrar como foi criado o projeto de exemplo que acompanha este tutorial.

Você vai precisar de um webserver. (apache, nginx etc) para abrir rodar os testes.

1. Copie todos os arquivos deste tutorial para um diretório no seu servidor, e depois acesse t/index.htm.  

Por conveniência, eu escolhi jogar tudo na raiz, e acesso da seguinte maneira: Recomendo fazer o mesmo ao menos na primeira vez

  http://localhost:5000/t/index.htm

Tudo começa ai. Literalmente, abra o source do arquivo. Você vai perceber que ele chama arquivos externos e arquivos locais. Exemplo:

  <script type="text/javascript" src="siesta-all.js"></script>

esse é o arquivo que contém a applicação do siesta.

Repare no próximo arquivo:

  <script type="text/javascript" src="/t/tests_config.js"></script>

Esse é o arquivo central das configurações de teste. Tudo começa nesse arquivo.

Vou colar ele abaixo e explicar através de comentários como ele funciona:

  Harness.configure({
      title             : 'Exemplo de testes',    //apenas um título para os testes

      verbosity         : 0,                      

  //  cachePreload      : true,    //vai cachear os arquivos de preload. 
                                   //preload quer dizer, carregar antes
                                   //ou seja, arquivos carregados antes do
                                   //arquivo de teste
  //  transparentEx     : true,
      keepResults       : false,
      autoCheckGlobals  : true,    //verifica variáveis globais, você define abaixo

      expectedGlobals   : [        //aqui você coloca quais variáveis são esperadas
          "Joose",                 //serem globais.. se escapar alguma variável
          "Class",                 //global não esperada, o siesta vai te avisar
          "Role", 
          "Module", 
          "Singleton", 
          "require",
          "joosetop",
          "JooseGearsInitializeGears",
          "joose",
          "JooseModule",
      ],

      maxThreads        : 1, //permite executar os testes em paralelo.
                             //é bom pra teste unitário, mas quando envolve usabilidade
                             //e uso do mouse, as vezes é preciso estar com foco no browser
                             //e na janela. Então eu sempre deixo 1 pra garantir.

      disableCaching    : true,//Se tiver ativado, é possível alterar o arquivo do teste e
                               //rodar ele que ele será atualizado automaticamente.
                               //basicamente vai chamar seu teste.js?_2132132132231 pra cache

  //  enableCodeCoverage: true,//esta opção vai verificar quantos métodos sua 
                               //aplicação tem e quantos foram executados.

      preload : [            //Arquivos que devem ser carregados antes de executar os testes.
          "/t/lib/jquery.js",//se seu teste usa jquery, vc vai precisar dele carregado antes.
          "/t/lib/joose.js", //entao vc adiciona ele aqui
          "/t/lib/tests_base.js",//<--- este arquivo tem métodos comums usados nos meus teste

          //aqui tem um exemploq eu verifica a url e carrega um arquivo de acordo
  //      ( window.location.href.match( "DESENVOLVIMENTO" ) )
          ? "/DEV/lib/tests-base.js"  : "./PROD/lib/tests-base.js"
      ]
  })


  //E agora, a lista dos arquivos de testes
  Harness.start(
      //um grupo de testes, você pode cirar quantos quiser
      {
        // O título deste grupo (aparece na pagina)
        group: "HOME PAGE",                         

        // vai sempre mostrar a tela da pagina dentro de um iframe
        forceDOMVisible: true,                      

        // Esta é a lista de itens, a lista dos meus arquivos de teste
        items : [                                   
          
          // apenas um teste, unitario prossivelmente
          "/t/modulo1_so_js.t.js",                  

          { //este teste envolve uma página htm e um teste js que vai rodar nela                                        
           forceDOMVisible: true,                   
            
            //caminho do meu teste
            url           : "/t/modulo1.t.js",      
            
            //a página que meu teste irá rodar em cima
            hostPageUrl   : "/site/modulo1.htm",    
            
            //e aqui eu especifíco para ele carregar estes arquivos pra este teste
            preload: [                              
              "/t/lib/jquery.js",
              "/t/lib/joose.js",
              "/t/lib/tests_base.js"
            ]
          }
        ]
      },
    
      //outro grupo de testes
      {
        group: "Módulo: Calculadora",
        forceDOMVisible: true,
        items : [
          //provavelmente apenas testes unitários
          "/t/modulo2.t.js",                        
        ]
      }
  )

Lembre-se sempre que o teste estará rodando no browser, e tudo no browser são páginas.. então tem um 

  window
  window.document
  body

etc... é uma página... vc pode usar jquery e criar o markup on the fly... ou pode rodar o teste em cima de uma página (url). A escolhe é sua.

=head2 Estrutura do arquivo de testes

Vou colar um dos arquivos aqui ( modulo1_so_js.t.js ) , para analisar

  StartTest(function(t) {   //<-- isso é obrigatório e indica que o teste começa aqui. 
                            //O Siesta vai chamar este método

    // Aqui eu escolhi colocar este método para colar o markup automagicamente 
    // para mim. (ver markup na variavel respectiva)   
    function hereDoc(f) {
      return f.toString().
          replace(/^[^\/]+\/\*!?/, '').
          replace(/\*\/[^\/]+$/, '');
    }
   
    //aqui eu defino meu markup. Foi o jeito que eu escolhi, mas 
    //poderia ter usado jquery ou qq coisa
    var markup = hereDoc(function() {/*!
        <div class="menu-drop">
          <ul class="menu-root">
            <li>
              Menu#1
              <ul class="menu-nivel-1">
                <li>opção #1 #1</li>
                <li>opção #1 #2</li>
                <li>opção #1 #3</li>
              </ul>
            </li>
            <li>
              Menu#2
            </li>
            <li>
              Menu#3
              <ul class="menu-nivel-1">
                <li>opção #3 #1</li>
                <li>opção #3 #2</li>
                <li>opção #3 #3</li>
              </ul>
            </li>
          </ul>
        </div>
       
      <script>
        jQuery( document ).ready( function () {
          jQuery( ".menu-drop > ul > li" )
            .mouseenter( function ( ev ) {
              console.log( ev );
              $( ev.currentTarget ).addClass( "hover" );
            } )
            .mouseleave( function ( ev ) {
              $( ev.currentTarget ).removeClass( "hover" );
            } )
        } );
      </script>
      <style>
        .menu-drop {
             background: none repeat scroll 0% 0% #FFCC00;
             height: 30px;
             width: 100%;
        }
   
        .menu-drop .menu-root {
             
        }
   
        .menu-drop > ul {
             list-style: none outside none;
        }
   
        .menu-drop > ul > li:first-child {
             margin-left: 0px;
        }
   
        .menu-drop > ul > li > ul {
            position: absolute;
            background: #FF0;
        }
   
        .menu-drop > ul > li {
             float: left;
             margin-left: 15px;
        }
   
        .menu-drop > ul > li > ul {
             display: none;
        }
   
        .menu-drop > ul > li.hover > ul {
             display: block;
             list-style: none;
        }
      </style>
     
   
    */} );


    //Aqui faço o jquery colar meu markup no body. 
    //Lembre-se, é browser  e o body sempre está presente.   
    jQuery('body').append( markup );


    //aqui eu crio uma divisória na listagem de resultados dos meus testes.   
    t.diag( "Simulate hover" );


    //e aqui eu executo uma corrente de comandos. Pois envolve interface e 
    //tem que ser testado através de correntes (chain)
    t.chain(
      {
        //move o cursor até o elemento abaixo...
        action: "moveCursorTo",
        target: ".menu-root>li:nth-child(1)"
      },
      {
        //depois move o cursor até outro elemento
        action: "moveCursorTo",
        target: ".menu-root>li:nth-child(2)"
      },
      function ( next ) {
        // valida com auxilio do jquery
        t.is( !$( ".menu-root>li:nth-child(3) li:nth-child(3)" ).is( ":visible" ), true, "Item do menu NAO está visivel" )
        next();
      },
      {
        //depois move para outro elemento
        moveCursorTo: ".menu-root>li:nth-child(3)"
      },
      function ( next ) {
        // valida com auxilio do jquery
        t.is( $( ".menu-root>li:nth-child(3) li:nth-child(3)" ).is(":visible"), true, "Item do menu está visivel" )
        next();
      }
    // aqui está comentado mas poderia clicar num elemento tambem
    // function ( next ) {
    //   t.moveMouseTo( ".menu-root>li:nth-child(1)" );
    //   next();
    // }
    //{
    //  action: "click",
    //  target: ".menu-root>li:nth-child(1)"
    //}
    )
   
  })

Agora fica para você olhar os arquivos que estão dentro de do diretório /t/
E rodar os testes e analisar como eles funcionam.

=head2 Referências e links relacionados

https://github.com/SenchaProSvcs/UnitTestDemo/tree/master/resources/siesta-1.1.5-lite/docs/guides/siesta_getting_started

http://www.bryntum.com/docs/siesta/#!/api/Siesta.Test.Action.Drag

http://www.sencha.com/blog/introducing-siesta-a-testing-tool-for-ext-js/

http://www.bryntum.com/examples/siesta-latest/examples/browse-all-desktop.html

http://www.youtube.com/watch?v=FP9U6XVdN_U

=head4 AUTHOR

Hernan Lopes

=head4 Contribuidores

Coloque seu nome aqui
